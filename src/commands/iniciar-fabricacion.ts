import { SlashCommandBuilder, ChatInputCommandInteraction, AutocompleteInteraction } from 'discord.js';
import { crearCardFabricacion } from '../utils/embeds';
import { Localizacion, Plano } from '../database/DatabaseManager';

export default {
    data: new SlashCommandBuilder()
        .setName('iniciar-fabricacion')
        .setDescription('Iniciar la fabricaci√≥n de un plano en una localizaci√≥n')
        .addIntegerOption(option =>
            option.setName('localizacion')
                .setDescription('Localizaci√≥n donde fabricar el plano')
                .setRequired(true)
                .setAutocomplete(true)
        )
        .addIntegerOption(option =>
            option.setName('plano')
                .setDescription('Tipo de plano a fabricar')
                .setRequired(true)
                .setAutocomplete(true)
        )
        .addUserOption(option =>
            option.setName('propietario')
                .setDescription('Usuario propietario de la fabricaci√≥n (opcional, por defecto t√∫)')
                .setRequired(false)
        )
        .addStringOption(option =>
            option.setName('notas')
                .setDescription('Notas adicionales sobre la fabricaci√≥n (opcional)')
                .setRequired(false)
        ),

    async autocomplete(interaction: AutocompleteInteraction) {
        try {
            const focusedOption = interaction.options.getFocused(true);
            
            if (focusedOption.name === 'localizacion') {
                const localizaciones = await interaction.client.db.obtenerLocalizaciones();
                const filtered = localizaciones.filter((loc: Localizacion) => 
                    loc.nombre.toLowerCase().includes(focusedOption.value.toLowerCase())
                );
                
                const opciones = filtered.slice(0, 25).map((loc: Localizacion) => ({
                    name: loc.nombre,
                    value: loc.id
                }));
                
                await interaction.respond(opciones);
                
            } else if (focusedOption.name === 'plano') {
                const planos = await interaction.client.db.obtenerPlanos();
                const filtered = planos.filter((plano: Plano) => 
                    plano.nombre.toLowerCase().includes(focusedOption.value.toLowerCase())
                );
                
                const opciones = filtered.slice(0, 25).map((plano: Plano) => ({
                    name: `${plano.nombre} (${plano.duracion_minutos} min)`,
                    value: plano.id
                }));
                
                await interaction.respond(opciones);
            }
        } catch (error) {
            console.error('‚ùå Error en autocompletar iniciar-fabricacion:', error);
            await interaction.respond([]);
        }
    },

    async execute(interaction: ChatInputCommandInteraction) {
        await interaction.deferReply();

        try {
            const localizacionId = interaction.options.getInteger('localizacion', true);
            const planoId = interaction.options.getInteger('plano', true);
            const propietario = interaction.options.getUser('propietario') || interaction.user;
            const notas = interaction.options.getString('notas');

            // Verificar que la localizaci√≥n existe y est√° disponible
            const localizaciones = await interaction.client.db.obtenerLocalizaciones();
            const localizacionSeleccionada = localizaciones.find((l: Localizacion) => l.id === localizacionId);
            
            if (!localizacionSeleccionada) {
                await interaction.editReply({
                    content: '‚ùå Localizaci√≥n no encontrada o no disponible para fabricaci√≥n.'
                });
                return;
            }

            // Verificar que el plano existe
            const planos = await interaction.client.db.obtenerPlanos();
            const planoSeleccionado = planos.find((p: Plano) => p.id === planoId);
            
            if (!planoSeleccionado) {
                await interaction.editReply({
                    content: '‚ùå Plano no encontrado.'
                });
                return;
            }

            // Crear la fabricaci√≥n
            const fabricacionId = await interaction.client.db.crearFabricacion(
                localizacionId,
                planoId,
                propietario.displayName || propietario.username,
                propietario.id,
                notas || undefined,
                interaction.channelId
            );

            // Obtener fabricaci√≥n completa para mostrar
            const fabricacion = await interaction.client.db.obtenerFabricacionPorId(fabricacionId);

            if (!fabricacion) {
                await interaction.editReply({
                    content: '‚ùå Error al crear la fabricaci√≥n. Int√©ntalo de nuevo.'
                });
                return;
            }

            // Crear y enviar card
            const embed = crearCardFabricacion(fabricacion);
            
            await interaction.editReply({
                content: `‚úÖ **Fabricaci√≥n iniciada exitosamente!**\nüïê Estar√° lista en **${planoSeleccionado.duracion_minutos} minutos**`,
                embeds: [embed]
            });

            // Log para administraci√≥n
            console.log(`üèóÔ∏è Nueva fabricaci√≥n iniciada: ID ${fabricacionId}, Plano: ${planoSeleccionado.nombre}, Localizaci√≥n: ${localizacionSeleccionada.nombre}, Usuario: ${propietario.tag}`);

        } catch (error) {
            console.error('‚ùå Error en comando iniciar-fabricacion:', error);
            
            await interaction.editReply({
                content: '‚ùå Hubo un error al iniciar la fabricaci√≥n. Por favor, int√©ntalo de nuevo.'
            });
        }
    },
};
