import { SlashCommandBuilder, ChatInputCommandInteraction, EmbedBuilder } from 'discord.js';
import { COLORS } from '../utils/embeds';
import { FabricacionCompleta } from '../database/DatabaseManager';
import { ChannelPermissions } from '../utils/channelPermissions';

export default {
    data: new SlashCommandBuilder()
        .setName('info')
        .setDescription('Informaci√≥n sobre el bot y comandos disponibles'),

    async execute(interaction: ChatInputCommandInteraction) {
        const embed = new EmbedBuilder()
            .setTitle('üèóÔ∏è GTAHUB Planos Manager')
            .setDescription('Bot para gestionar fabricaci√≥n de planos de negocios en GTAHUB RP')
            .setColor(COLORS.GTAHUB)
            .setThumbnail('https://i.imgur.com/4M34hi2.png') // Logo placeholder
            .setTimestamp()
            .setFooter({ 
                text: 'GTAHUB Planos Manager v2.0',
                iconURL: 'https://i.imgur.com/4M34hi2.png'
            });

        // Comandos disponibles
        embed.addFields(
            {
                name: 'üìã Comandos Principales',
                value: `
                \`/iniciar-fabricacion\` - Iniciar fabricaci√≥n de un plano
                \`/listar-fabricaciones\` - Ver todas las fabricaciones
                \`/recoger-fabricacion\` - Marcar fabricaci√≥n como recogida
                \`/info\` - Ver esta informaci√≥n
                `,
                inline: false
            },
            {
                name: 'üìä Estados de Fabricaciones',
                value: `
                ‚è≥ **En Proceso** - Fabricaci√≥n en curso
                ‚úÖ **Listo** - Listo para recoger (notificado)
                üì¶ **Recogido** - Ya recogido de la localizaci√≥n
                `,
                inline: true
            },
            {
                name: 'üèóÔ∏è Sistema de Fabricaci√≥n',
                value: `
                ‚Ä¢ Selecciona **localizaci√≥n** y **tipo de plano**
                ‚Ä¢ El sistema trackea el tiempo autom√°ticamente
                ‚Ä¢ Te notifica cuando est√© listo para recoger
                ‚Ä¢ Cards visuales con toda la informaci√≥n
                `,
                inline: true
            },
            {
                name: 'üîî Notificaciones Autom√°ticas',
                value: `
                ‚Ä¢ Revisi√≥n cada 5 minutos
                ‚Ä¢ Notificaci√≥n cuando est√© listo
                ‚Ä¢ Cards bonitas con fotos de localizaciones
                ‚Ä¢ Menciona al propietario autom√°ticamente
                `,
                inline: false
            },
            {
                name: 'üí° Caracter√≠sticas Avanzadas',
                value: `
                ‚Ä¢ Base de datos normalizada (3 tablas)
                ‚Ä¢ Autocompletado inteligente en comandos
                ‚Ä¢ Filtros por usuario y estado
                ‚Ä¢ Men√∫s interactivos para navegaci√≥n
                ‚Ä¢ Sistema de permisos robusto
                `,
                inline: false
            }
        );

        // Estad√≠sticas del bot
        try {
            const todasFabricaciones = await interaction.client.db.obtenerFabricaciones();
            const enProceso = todasFabricaciones.filter((f: FabricacionCompleta) => !f.recogido && !f.listo_para_recoger).length;
            const listos = todasFabricaciones.filter((f: FabricacionCompleta) => f.listo_para_recoger && !f.recogido).length;
            const recogidos = todasFabricaciones.filter((f: FabricacionCompleta) => f.recogido).length;

            embed.addFields({
                name: 'üìà Estad√≠sticas Actuales',
                value: `
                **Total de fabricaciones:** ${todasFabricaciones.length}
                **En proceso:** ${enProceso}
                **Listos para recoger:** ${listos}
                **Recogidos:** ${recogidos}
                **Bot activo desde:** <t:${Math.floor(Date.now() / 1000)}:R>
                `,
                inline: false
            });

            // Informaci√≥n adicional sobre localizaciones y planos
            const localizaciones = await interaction.client.db.obtenerLocalizaciones();
            const planos = await interaction.client.db.obtenerPlanos();

            embed.addFields({
                name: 'üè¢ Recursos Disponibles',
                value: `
                **Localizaciones activas:** ${localizaciones.length}
                **Tipos de planos:** ${planos.length}
                **Base de datos:** SQLite (persistente)
                `,
                inline: true
            });

            // Informaci√≥n de configuraci√≥n de canales
            const channelInfo = ChannelPermissions.getChannelInfo();
            const canalFabricacion = channelInfo.fabricacion && channelInfo.fabricacion !== 'YOUR_FABRICACION_CHANNEL_ID' 
                ? `<#${channelInfo.fabricacion}>` : '‚ùå No configurado';
            const canalAdmin = channelInfo.admin && channelInfo.admin !== 'YOUR_ADMIN_CHANNEL_ID' 
                ? `<#${channelInfo.admin}>` : '‚ùå No configurado';
            
            embed.addFields({
                name: 'üèóÔ∏è Configuraci√≥n de Canales',
                value: `
                **Canal de Fabricaci√≥n:** ${canalFabricacion}
                **Canal de Administraci√≥n:** ${canalAdmin}
                **Estado:** ${channelInfo.configured ? '‚úÖ Configurado' : '‚ö†Ô∏è Necesita configuraci√≥n'}
                `,
                inline: true
            });

        } catch (error) {
            console.error('Error obteniendo estad√≠sticas:', error);
            embed.addFields({
                name: '‚ö†Ô∏è Estad√≠sticas',
                value: 'Error cargando estad√≠sticas del sistema',
                inline: false
            });
        }

        await interaction.reply({ 
            embeds: [embed],
            ephemeral: false 
        });
    },
};
/*
import { SlashCommandBuilder, ChatInputCommandInteraction, EmbedBuilder } from 'discord.js';
import { COLORS } from '../utils/embeds';
import { FabricacionCompleta } from '../database/DatabaseManager';
import { ChannelPermissions } from '../utils/channelPermissions';

export default {
    data: new SlashCommandBuilder()
        .setName('info')
        .setDescription('Informaci√≥n sobre el bot y comandos disponibles'),

    async execute(interaction: ChatInputCommandInteraction) {
        const embed = new EmbedBuilder()
            .setTitle('üèóÔ∏è GTAHUB Planos Manager')
            .setDescription('Bot para gestionar fabricaci√≥n de planos de negocios en GTAHUB RP')
            .setColor(COLORS.GTAHUB)
            .setThumbnail('https://i.imgur.com/4M34hi2.png') // Logo placeholder
            .setTimestamp()
            .setFooter({ 
                text: 'GTAHUB Planos Manager v2.0',
                iconURL: 'https://i.imgur.com/4M34hi2.png'
            });

        // Comandos disponibles
        embed.addFields(
            {
                name: 'üìã Comandos Principales',
                value: `
                \`/iniciar-fabricacion\` - Iniciar fabricaci√≥n de un plano
                \`/listar-fabricaciones\` - Ver todas las fabricaciones
                \`/recoger-fabricacion\` - Marcar fabricaci√≥n como recogida
                \`/info\` - Ver esta informaci√≥n
                `,
                inline: false
            },
            {
                name: 'üìä Estados de Fabricaciones',
                value: `
                ‚è≥ **En Proceso** - Fabricaci√≥n en curso
                ‚úÖ **Listo** - Listo para recoger (notificado)
                üì¶ **Recogido** - Ya recogido de la localizaci√≥n
                `,
                inline: true
            },
            {
                name: 'üèóÔ∏è Sistema de Fabricaci√≥n',
                value: `
                ‚Ä¢ Selecciona **localizaci√≥n** y **tipo de plano**
                ‚Ä¢ El sistema trackea el tiempo autom√°ticamente
                ‚Ä¢ Te notifica cuando est√© listo para recoger
                ‚Ä¢ Cards visuales con toda la informaci√≥n
                `,
                inline: true
            },
            {
                name: 'üîî Notificaciones Autom√°ticas',
                value: `
                ‚Ä¢ Revisi√≥n cada 5 minutos
                ‚Ä¢ Notificaci√≥n cuando est√© listo
                ‚Ä¢ Cards bonitas con fotos de localizaciones
                ‚Ä¢ Menciona al propietario autom√°ticamente
                `,
                inline: false
            },
            {
                name: 'üí° Caracter√≠sticas Avanzadas',
                value: `
                ‚Ä¢ Base de datos normalizada (3 tablas)
                ‚Ä¢ Autocompletado inteligente en comandos
                ‚Ä¢ Filtros por usuario y estado
                ‚Ä¢ Men√∫s interactivos para navegaci√≥n
                ‚Ä¢ Sistema de permisos robusto
                `,
                inline: false
            }
        );

        // Estad√≠sticas del bot
        try {
            const todasFabricaciones = await interaction.client.db.obtenerFabricaciones();
            const enProceso = todasFabricaciones.filter((f: FabricacionCompleta) => !f.recogido && !f.listo_para_recoger).length;
            const listos = todasFabricaciones.filter((f: FabricacionCompleta) => f.listo_para_recoger && !f.recogido).length;
            const recogidos = todasFabricaciones.filter((f: FabricacionCompleta) => f.recogido).length;

            embed.addFields({
                name: 'üìà Estad√≠sticas Actuales',
                value: `
                **Total de fabricaciones:** ${todasFabricaciones.length}
                **En proceso:** ${enProceso}
                **Listos para recoger:** ${listos}
                **Recogidos:** ${recogidos}
                **Bot activo desde:** <t:${Math.floor(Date.now() / 1000)}:R>
                `,
                inline: false
            });

            // Informaci√≥n adicional sobre localizaciones y planos
            const localizaciones = await interaction.client.db.obtenerLocalizaciones();
            const planos = await interaction.client.db.obtenerPlanos();

            embed.addFields({
                name: 'üè¢ Recursos Disponibles',
                value: `
                **Localizaciones activas:** ${localizaciones.length}
                **Tipos de planos:** ${planos.length}
                **Base de datos:** SQLite (persistente)
                `,
                inline: true
            });

            // Informaci√≥n de configuraci√≥n de canales
            const channelInfo = ChannelPermissions.getChannelInfo();
            const canalFabricacion = channelInfo.fabricacion && channelInfo.fabricacion !== 'YOUR_FABRICACION_CHANNEL_ID' 
                ? `<#${channelInfo.fabricacion}>` : '‚ùå No configurado';
            const canalAdmin = channelInfo.admin && channelInfo.admin !== 'YOUR_ADMIN_CHANNEL_ID' 
                ? `<#${channelInfo.admin}>` : '‚ùå No configurado';
            
            embed.addFields({
                name: 'üèóÔ∏è Configuraci√≥n de Canales',
                value: `
                **Canal de Fabricaci√≥n:** ${canalFabricacion}
                **Canal de Administraci√≥n:** ${canalAdmin}
                **Estado:** ${channelInfo.configured ? '‚úÖ Configurado' : '‚ö†Ô∏è Necesita configuraci√≥n'}
                `,
                inline: true
            });

        } catch (error) {
            console.error('Error obteniendo estad√≠sticas:', error);
            embed.addFields({
                name: '‚ö†Ô∏è Estad√≠sticas',
                value: 'Error cargando estad√≠sticas del sistema',
                inline: false
            });
        }

        await interaction.reply({ 
            embeds: [embed],
            ephemeral: false 
        });
    },
};
*/
